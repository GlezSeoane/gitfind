#!/bin/bash

<<DOC
#####################################################################
# @Project: gitfind                                                 #
# Purpose: gitfind is an utility that finds the git repositories    #
#           included in the directory you want. You can only list   #
#           or apply another specific utility to them. It also      #
#           provides the option to filter the search to capture a   #
#           specific repository.                                    #
#                                                                   #
# @Program: uninstall.sh                                            #
# @Author: Borja GonzÃ¡lez Seoane (GlezSeoane)                       #
# @Email: dev@glezseoane.com                                        #
# @Date: 29/12/2018                                                 #
# Program purpose: Main script of the project.                      #
# Output: 0 on success, 1 on illegal parameters error,              #
#           2 on invalid directory error, 3 on not installed or     #
#           reachable utility error and 4 on not applicable utility #
#           to directory error.                                     #
#                                                                   #
# Version: 1.0                                                      #
#                                                                   #
#                 Read manpage for more information                 #
#####################################################################
DOC


DIR=$PWD
#UTIL=null
#PATTERN=null
#VAGUE_FILTER_MODE=null
#VERBOSITY=null

# Output stye
RESTORE="\033[0m"
RED="\033[01;31m"


function paramError {
	echo -en >&2 "${RED}Error: Illegal parameters passed. Aborting...${RESTORE}\n"
}



#************* Reception of input parameters *************#

# Handle all parameters passed
# Input: [-p path] [-ex util] [-f pattern] [-v]
if [[ $# > "7" ]]; then
	paramError
	exit 1
else
	for (( i=1; i<=$#; i+=2)); do
		case ${!i} in
			"-p")
				j=$((i+1))
				DIR=${!j}
				;;
			"-ex")
				j=$((i+1))
				UTIL=${!j}
				;;
			"-f")
				j=$((i+1))
				PATTERN=${!j}
				;;
			"-F")
				j=$((i+1))
				PATTERN=${!j}
				VAGUE_FILTER_MODE=true
				;;
			"-v")
				VERBOSITY=true
				i=$i-1
				;;
			*)
				paramError
				exit 1
				;;
		esac
	done
fi


# Check if there have been no crosses due to a wrong parameter pass
if [[ $DIR == "-ex" || $DIR == "-f" || $DIR == "-F" || $DIR == "-v" ]]; then
	if [[ $UTIL == "-p" || $UTIL == "-f" || $UTIL == "-F" || $UTIL == "-v" ]]; then
		if [[ $PATTERN == "-p" || $PATTERN == "-ex" || $PATTERN == "-v" ]]; then
			paramError
			exit 1
		fi
	fi
fi


# Purgue DIR specification
DIR="${DIR//\/\///}"



#************* Check input parameters *************#

# Check if DIR passed points to a valid directory
if [[ ! -d $DIR ]]; then
	echo -en >&2 "${RED}Error: $DIR is not a valid directory. Aborting...${RESTORE}\n";
	exit 2
fi


# Check if the UTIL passed is reachable
if [[ -n $UTIL ]]; then
	command -v $UTIL >/dev/null 2>&1 || {
		echo -en >&2 "${RED}Error: $UTIL is not installed. Aborting...${RESTORE}\n";
		exit 3
	}
fi



#************* Configure main loop *************#

# The only list option is equivalent to run pwd in DIR
if [[ -z $UTIL ]]; then
	UTIL=pwd
fi


# Before run the main, some conditionals are resolved for efficiency
 
# Head message in verbose mode or none in normal mode
if [[ -n $VERBOSITY ]]; then
	function head_verb_msg {
		echo "*** Executing $UTIL in $1"
	}
else
	function head_verb_msg {
		:
	}
fi

# Footer message in verbose mode or none in normal mode
if [[ -n $VERBOSITY ]]; then
	function footer_verb_msg {
		echo -en "\n"
	}
else
	function footer_verb_msg {
		:
	}
fi

# Main loop heart: apply $UTIL to all or only to pattern matched repos
if [[ -z $PATTERN ]]; then
	function loop_heart {
		$UTIL
	}
else
	if [[ -z $VAGUE_FILTER_MODE ]]; then
		function loop_heart {
			if [[ $1 == *"$PATTERN" ]]; then
				$UTIL
			fi
		}
	else
		function loop_heart {
			if [[ $1 == *"$PATTERN"* ]]; then
				$UTIL
			fi
		}
	fi
fi



#************* MAIN *************#

# Run main with the coupled configuration
find $DIR -name .git -type d -prune | while read d; do
	cd $d/..
	d=${d%/*}
	
	head_verb_msg $d
	
	loop_heart $d

	if [[ "$?" != "0" ]]; then
		echo -en >&2 "${RED}Error: impossible execute $UTIL in $d. Aborting...${RESTORE}\n"
		exit 4
	fi

	footer_verb_msg
	
	cd $OLDPWD
done



exit 0 # All okey: finish

